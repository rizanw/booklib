// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	book "booklib/internal/usecase/book"
	context "context"

	domainbook "booklib/internal/domain/book"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, in
func (_m *UseCase) AddBook(ctx context.Context, in book.AddBookInput) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, book.AddBookInput) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *UseCase) DeleteBook(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields: ctx
func (_m *UseCase) GetAllBooks(ctx context.Context) ([]domainbook.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 []domainbook.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domainbook.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domainbook.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domainbook.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: ctx, id
func (_m *UseCase) GetBook(ctx context.Context, id string) (*domainbook.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 *domainbook.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domainbook.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domainbook.Book); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainbook.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: ctx, id, in
func (_m *UseCase) UpdateBook(ctx context.Context, id string, in book.UpdateBookInput) error {
	ret := _m.Called(ctx, id, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, book.UpdateBookInput) error); ok {
		r0 = rf(ctx, id, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
